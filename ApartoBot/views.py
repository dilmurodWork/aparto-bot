from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text
from Keyboards.all_kb import *
from settings import bot
# from ChannelMessages import main

filters = {}
lang = ''
rus = 'üá∑üá∫ –†—É—Å—Å–∫–∏–π'
uzb = 'üá∫üáø –é–∑–±–µ–∫—á–∞'

async def start(message: types.Message):
    text = 'Xush kelibsiz, tilni tanlang.\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫.'
    try:
        await bot.send_message(message.from_user.id, text, reply_markup=langs_kb)
        await message.delete()
        text = message.from_user.first_name
        text += ' –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç'
        await bot.send_message(chat_id=2039384031, text=text)
    except:
        await message.reply('–ü–µ—Ä–µ—Ö–æ–¥ –≤ –õ–°, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–º—É:\nhttps://t.me/dnm_test_bot')

async def choose_language(message: types.Message):
    global lang
    lang = message.text
    if lang == rus:
        await message.reply(f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ({lang}):", reply_markup= category_kb_ru)
    else:
        await message.reply(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è–Ω–∏ —Ç–∞–Ω–≥–ª–∞–Ω–≥ ({lang}):", reply_markup= category_kb_uz)

async def choose_category(message: types.Message):
    filters['category'] = message.text
    if lang == rus:
        await message.reply(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω ({message.text}):", reply_markup=district_kb_ru)
    else:
        await message.reply(f" –¢—É–º–∞–Ω–Ω–∏ —Ç–∞–Ω–≥–ª–∞–Ω–≥ ({message.text}):", reply_markup=district_kb_uz)


async def choose_district(message: types.Message):
    district = message.text
    filters['district'] = district
    if lang == rus:
        await message.reply(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ ({district}):", reply_markup=type_kb_ru)
    else:
        await message.reply(f"–ú—É–ª–∫ —Ç—É—Ä–∏–Ω–∏ —Ç–∞–Ω–≥–ª–∞–Ω–≥ ({district}):", reply_markup=type_kb_uz)


async def choose_property_type(message: types.Message):
    property_type = message.text
    filters['type'] = property_type
    if lang == rus and property_type in ['–ö–æ–º–º–µ—Ä—Ü–∏—è', '–ö–≤–∞—Ä—Ç–∏—Ä–∞']:
        await message.reply(f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–∫–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç ({property_type}):", reply_markup=kvart_rooms_kb_ru)
    elif lang == uzb and property_type in ['–ö–æ–º–º–µ—Ä—Ü–∏—è', '–ö–≤–∞—Ä—Ç–∏—Ä–∞']:
        await message.reply(f"–•–æ–Ω–∞–ª–∞—Ä —Å–æ–Ω–∏–Ω–∏ —Ç–∞–Ω–≥–ª–∞–Ω–≥ ({property_type}):", reply_markup=kvart_rooms_kb_ru)
    elif lang == rus and property_type == '–î–æ–º':
        await message.reply(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –¥–æ–º–∞ ({property_type}):", reply_markup=dom_type_kb_ru)
    else:
        await message.reply(f"–£–π –º–∞–π–¥–æ–Ω–∏–Ω–∏ —Ç–∞–Ω–Ω–≥–ª–∞–Ω–≥ ({property_type}):", reply_markup=dom_type_kb_uz)

async def choose_price_room(message: types.Message):
    rooms= message.text
    filters['rooms'] = rooms
    if lang == rus and filters['category'] == '–ê—Ä–µ–Ω–¥–∞':
        await message.reply(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω—É ({rooms}):", reply_markup=price_aren_kb_ru)
    elif lang == uzb and filters['category'] == '–ò–∂–∞—Ä–∞':
        await message.reply(f"–ù–∞—Ä—Ö–∏–Ω–∏ —Ç–∞–Ω–≥–ª–∞–Ω–≥ ({rooms}):", reply_markup=price_aren_kb_uz)
    elif lang == rus and filters['category'] == '–ü—Ä–æ–¥–∞–∂–∞':
        await message.reply(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω—É ({rooms}):", reply_markup=price_buy_kb_ru)
    else:
        await message.reply(f"–ù–∞—Ä—Ö–∏–Ω–∏ —Ç–∞–Ω–≥–ª–∞–Ω–≥ ({rooms}):", reply_markup=price_buy_kb_ru)

async def choose_price_house(message: types.Message):
    area= message.text
    filters['area'] = area
    if lang == rus and filters['category'] == '–ê—Ä–µ–Ω–¥–∞':
        await message.reply(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω—É ({area}):", reply_markup=price_aren_kb_ru)
    elif lang == uzb and filters['category'] == '–ò–∂–∞—Ä–∞':
        await message.reply(f"–ù–∞—Ä—Ö–∏–Ω–∏ —Ç–∞–Ω–≥–ª–∞–Ω–≥ ({area}):", reply_markup=price_aren_kb_uz)
    elif lang == rus and filters['category'] == '–ü—Ä–æ–¥–∞–∂–∞':
        await message.reply(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω—É ({area}):", reply_markup=price_buy_kb_ru)
    else:
        await message.reply(f"–ù–∞—Ä—Ö–∏–Ω–∏ —Ç–∞–Ω–≥–ª–∞–Ω–≥ ({area}):", reply_markup=price_buy_kb_ru)

async def search_handler(message: types.Message):
    filters['price'] = message.text
    await message.reply(f"Search for: {filters}")
 
    


def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(start, commands=['start', 'help'])
    dp.register_message_handler(start, Text(contains='‚öôÔ∏è'))
    dp.register_message_handler(choose_language, Text(equals=rus) | Text(equals=uzb))
    dp.register_message_handler(choose_category, 
                                Text(equals='–ê—Ä–µ–Ω–¥–∞') | Text(equals='–ü—Ä–æ–¥–∞–∂–∞') | 
                                Text('–°–æ—Ç—É–≤') | Text('–ò–∂–∞—Ä–∞'))

    dp.register_message_handler(choose_district, lambda message: message.text in districts)
    dp.register_message_handler(choose_property_type, 
                                Text('–ö–≤–∞—Ä—Ç–∏—Ä–∞') | Text('–ö–æ–º–º–µ—Ä—Ü–∏—è') | 
                                Text('–î–æ–º') | Text('–•–æ–Ω–∞–¥–æ–Ω'))    

    dp.register_message_handler(choose_price_room, lambda message: message.text in '12345678910')
    dp.register_message_handler(choose_price_house, lambda message: message.text in cotx_list)
    
    dp.register_message_handler(search_handler, lambda message: message.text in price_rent_list)
    dp.register_message_handler(search_handler, lambda message: message.text in price_buy_list)
    dp.register_message_handler(start, Text(contains='üîô'))